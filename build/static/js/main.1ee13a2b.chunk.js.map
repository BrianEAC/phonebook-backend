{"version":3,"sources":["services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","services","getAll","axios","get","create","newObject","post","erase","id","delete","replace","put","then","response","data","Search","name","change","className","value","onChange","PersonForm","submit","nameValue","nameChange","numberValue","numberChange","onSubmit","type","Persons","persons","handleDelete","thisClass","map","person","number","onClick","Notification","message","App","useState","setPersons","searchName","setSearchName","newName","setNewName","newNumber","setNewNumber","theMessage","setMessage","theDeletedMessage","setDeleted","useEffect","personsService","filteredPersons","search","filter","toLowerCase","includes","filterPersons","e","target","personObject","preventDefault","concat","setTimeout","catch","error","window","confirm","p","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ee13a2b.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst erase = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst replace = (newObject, id) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then((response) => response.data)\n}\n\nconst services = { getAll, create, erase, replace }\n\nexport default services","import React, { useEffect, useState } from \"react\";\nimport personsService from \"./services/persons\";\n\nconst Search = ({ name, change }) => {\n  return (\n    <div className=\"searchForm\">\n      <h3>Search</h3>\n      <input value={name} onChange={change} />\n    </div>\n  );\n};\n\nconst PersonForm = ({\n  submit,\n  nameValue,\n  nameChange,\n  numberValue,\n  numberChange,\n}) => {\n  return (\n    <>\n      <h3 className=\"personFormTitle\">Add new</h3>\n      <form onSubmit={submit} className=\"personForm\">\n        <div>\n          name: <input value={nameValue} onChange={nameChange} />\n        </div>\n        <div>\n          number: <input value={numberValue} onChange={numberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nconst Persons = ({ persons, handleDelete, thisClass }) => {\n  return (\n    <div className={thisClass}>\n      <h2>Numbers</h2>\n      <ul>\n        {persons.map((person) => (\n          <li key={person.number}>\n            {person.name} : {person.number}\n            <button onClick={() => handleDelete(person.id, person.name)}>\n              delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Notification = ({ message, thisClass }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className={thisClass}>{message}</div>;\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [searchName, setSearchName] = useState();\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [theMessage, setMessage] = useState(null);\n  const [theDeletedMessage, setDeleted] = useState(null);\n  useEffect(() => {\n    personsService.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  const addPerson = (e) => {\n    const personObject = { name: newName, number: newNumber };\n    e.preventDefault();\n    personsService\n      .create(personObject)\n      .then((response) => {\n        setPersons(persons.concat(response.data));\n        setMessage(`'${personObject.name}' was added`);\n        setNewName(\"\");\n        setNewNumber(\"\");\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n      })\n      .catch((error) => {\n        setDeleted(error.response.data.error);\n        setTimeout(() => {\n          setDeleted(null);\n        }, 3000);\n      });\n  };\n\n  const erasePerson = (id, name) => {\n    if (window.confirm(`Do you really want to delete ${name}?`)) {\n      personsService.erase(id).then(() => {\n        setPersons(persons.filter((p) => p.id !== id));\n        setSearchName(\"\");\n        setDeleted(`'${name}' was deleted`);\n        setTimeout(() => {\n          setDeleted(null);\n        }, 3000);\n      });\n    }\n  };\n\n  const nameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const numberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const searchChange = (e) => {\n    setSearchName(e.target.value);\n  };\n\n  const filterPersons = (persons, search) => {\n    if (!search) {\n      return persons;\n    }\n    return persons.filter((person) => {\n      const personName = person.name.toLowerCase();\n      return personName.includes(search);\n    });\n  };\n\n  const filteredPersons = filterPersons(persons, searchName);\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>Phonebook</h1>\n        <p>A phone book app.</p>\n      </div>\n      <div className=\"app\">\n        <div className=\"left\">\n          <Notification message={theMessage} thisClass=\"added\" />\n          <Notification message={theDeletedMessage} thisClass=\"deleted\" />\n          <Search\n            name={searchName}\n            change={searchChange}\n            thisClass=\"searchForm\"\n          />\n          <PersonForm\n            submit={addPerson}\n            nameValue={newName}\n            nameChange={nameChange}\n            numberValue={newNumber}\n            numberChange={numberChange}\n            thisClass=\"personForm\"\n          />\n        </div>\n        <div className=\"right\">\n          <Persons\n            persons={filteredPersons}\n            handleDelete={erasePerson}\n            thisClass=\"persons\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}